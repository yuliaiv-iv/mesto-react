{"version":3,"sources":["components/Header.js","utils/Api.js","components/Card.js","components/Main.js","components/Footer.js","components/PopupWithForm.js","components/ImagePopup.js","components/App.js","serviceWorker.js","index.js","images/logo.svg"],"names":["Header","className","src","logo","alt","api","options","this","_baseUrl","baseUrl","_headers","headers","res","ok","json","Promise","reject","status","fetch","then","_checkStatus","data","method","body","JSON","stringify","name","link","about","avatar","cardId","authorization","Card","props","card","onClick","onCardClick","type","aria-label","likes","length","Main","React","useState","userAvatar","setUserAvatar","userName","setUserName","userDescription","setUserDescription","cards","setCards","useEffect","getUserData","item","catch","err","console","log","getInitialCards","onEditAvatar","onEditProfile","onAddPlace","map","key","_id","Footer","PopupWithForm","isOpen","onClose","title","action","noValidate","children","button","ImagePopup","App","isEditProfilePopupOpen","setIsEditProfilePopupOpen","isAddPlacePopupOpen","setIsAddPlacePopupOpen","isEditAvatarPopupOpen","setIsEditAvatarPopupOpen","selectedCard","setSelectedCard","closeAllPopups","id","value","placeholder","required","minLength","maxLength","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message","module","exports"],"mappings":"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","file":"static/js/main.d7a88058.chunk.js","sourcesContent":["import React from 'react';\nimport logo from '../images/logo.svg';\n\nfunction Header() {\n    return (\n        <header className=\"header\">\n            <img className=\"header__logo\"\n                src={logo}\n                alt=\"Логотип\" />\n        </header>\n    );\n}\n\nexport default Header;","export class Api {\n    constructor(options) {\n        this._baseUrl = options.baseUrl;\n        this._headers = options.headers;\n    }\n\n    _checkStatus(res) {\n        if (res.ok) {\n            return res.json()\n        }\n        return Promise.reject(`Что-то пошло не так: ${res.status}`);\n    }\n\n    getInitialCards() {\n        return fetch(`${this._baseUrl}/cards`, {\n            headers: this._headers\n        })\n            .then(this._checkStatus);\n    }\n\n    getUserData() {\n        return fetch(`${this._baseUrl}/users/me`, {\n            headers: this._headers,\n\n        })\n            .then(this._checkStatus);\n    }\n\n    postNewCard(data) {\n        return fetch(`${this._baseUrl}/cards`, {\n            headers: this._headers,\n            method: 'POST',\n            body: JSON.stringify({\n                name: data.name,\n                link: data.link\n            })\n        })\n            .then(this._checkStatus);\n    }\n\n    setUserData(data) {\n        return fetch(`${this._baseUrl}/users/me`, {\n            headers: this._headers,\n            method: 'PATCH',\n            body: JSON.stringify({\n                name: data.name,\n                about: data.about\n            })\n        })\n            .then(this._checkStatus);\n    }\n\n    setUserAvatarData(data) {\n        return fetch(`${this._baseUrl}/users/me/avatar`, {\n            headers: this._headers,\n            method: 'PATCH',\n            body: JSON.stringify({\n                avatar: data.link\n            })\n        })\n            .then(this._checkStatus);\n    }\n\n    deleteCard(cardId) {\n        return fetch(`${this._baseUrl}/cards/${cardId}`, {\n            headers: this._headers,\n            method: 'DELETE'\n        })\n            .then(this._checkStatus);\n    }\n\n    addLike(cardId) {\n        return fetch(`${this._baseUrl}/cards/likes/${cardId}`, {\n            method: 'PUT',\n            headers: this._headers\n        })\n            .then(this._checkStatus);\n    }\n\n    deleteLike(cardId) {\n        return fetch(`${this._baseUrl}/cards/likes/${cardId}`, {\n            method: 'DELETE',\n            headers: this._headers\n        })\n            .then(this._checkStatus);\n    }\n}\n\nexport const api = new Api({\n    baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-14',\n    headers: {\n        authorization: '4905795f-d4f5-4259-8ab1-1154380da5eb',\n        'Content-Type': 'application/json'\n    }\n});\n","import React from 'react';\n\nfunction Card(props) {\n\n    function handleClick() {\n        props.onCardClick(props.card);\n    }\n\n    return (\n        <li className=\"card\">\n            <img\n                className=\"card__image\"\n                src={props.card.link} alt={props.card.name} onClick={handleClick} />\n            <button\n                type=\"button\"\n                aria-label=\"удалить элемент\"\n                className=\"button button__delete opacity\">\n            </button>\n            <div className=\"card__info\">\n                <h3 className=\"card__title\" >{props.card.name}</h3>\n                <div className=\"card__like\">\n                    <button\n                        type=\"button\"\n                        aria-label=\"выразить положительную реакцию\"\n                        className=\"button button__like opacity\">\n                    </button>\n                    <dev className=\"card__like-counter\">{props.card.likes.length}</dev>\n                </div>\n            </div>\n        </li>\n    )\n}\n\nexport default Card;","import React from 'react';\nimport { api } from '../utils/Api.js';\nimport Card from './Card.js';\n\nfunction Main(props) {\n    const [userAvatar, setUserAvatar] = React.useState();\n    const [userName, setUserName] = React.useState();\n    const [userDescription, setUserDescription] = React.useState();\n    const [cards, setCards] = React.useState([]);\n\n    React.useEffect(() => {\n        api.getUserData()\n            .then((item) => {\n                setUserAvatar(item.avatar);\n                setUserName(item.name);\n                setUserDescription(item.about);\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    })\n\n    React.useEffect(() => {\n        api.getInitialCards()\n            .then((item) => {\n                setCards(item);\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    }, [])\n\n    return (\n        <main className=\"content\">\n            <section className=\"profile\">\n                <dev className=\"profile__avatar\">\n                    <img\n                        className=\"profile__image\"\n                        src={userAvatar}\n                        alt=\"Фотография профиля\"\n                    />\n                    <div className=\"profile__cover\">\n                        <button\n                            onClick={props.onEditAvatar}\n                            type=\"button\"\n                            className=\"button profile__button-avatar\"\n                            aria-label=\"обновить фотографию пользователя\">\n                        </button>\n                    </div>\n                </dev>\n                <div className=\"profile__info\">\n                    <h1 className=\"profile__name\">{userName}</h1>\n                    <button\n                        onClick={props.onEditProfile}\n                        type=\"button\"\n                        aria-label=\"обновить информацию пользователя\"\n                        className=\"button profile__button-edit opacity\">\n                    </button>\n                    <p className=\"profile__about\">{userDescription}</p>\n                </div>\n                <button\n                    onClick={props.onAddPlace}\n                    type=\"button\"\n                    aria-label=\"добавить новую карточку\"\n                    className=\"button profile__button-add opacity\">\n                </button>\n            </section>\n            <section className=\"card-container\">\n                <ul className=\"card-container__list\">\n                    {cards.map(card => <Card {...card}\n                        onCardClick={props.onCardClick}\n                        key={card._id}\n                        card={card} />)}\n                </ul>\n            </section>\n        </main>\n    );\n}\n\nexport default Main;","import React from 'react';\n\nfunction Footer() {\n    return (\n        <footer className=\"footer\">\n            <p className=\"footer__copyright\">&copy; 2020 Mesto Russia</p>\n        </footer>\n    );\n}\n\nexport default Footer;","import React from 'react';\n\nfunction PopupWithForm(props) {\n    return (\n        <section className={`popup popup_type_${props.name} ${props.isOpen ? \"popup_open\" : \"\"}`}>\n            <div className=\"popup__container\">\n                <button\n                    type=\"button\"\n                    aria-label=\"закрыть модальное окно\"\n                    className=\"button popup__close opacity\"\n                    onClick={props.onClose}>\n                </button>\n                <h3 className=\"popup__title\">{props.title}</h3>\n                <form\n                    name={props.name}\n                    className=\"popup__form\"\n                    action=\"#\"\n                    method=\"POST\"\n                    noValidate>\n                    {props.children}\n                    <button\n                        type=\"submit\"\n                        className=\"button popup__button-submit\">{props.button}\n                    </button>\n                </form>\n            </div>\n        </section>\n    )\n}\n\nexport default PopupWithForm;","import React from 'react';\n\nfunction ImagePopup(props) {\n    return (\n        <section className={`popup popup__image popup__background_image ${props.card ? \"popup_open\" : \"\"}`}>\n            <figure className=\"popup__container popup__container_image\">\n                <button\n                    type=\"button\"\n                    aria-label=\"закрыть модальное окно\"\n                    className=\"button popup__close opacity\"\n                    onClick={props.onClose}>\n                </button>\n                <img\n                    className=\"popup__view\"\n                    src={props.card ? props.card.link : \"\"}\n                    alt={props.card ? props.card.name : \"\"}\n                />\n                <figcaption\n                    className=\"popup__title popup__title_image\">\n                    {props.card ? props.card.name : ''}\n                </figcaption>\n            </figure>\n        </section>\n    )\n}\n\nexport default ImagePopup;","import React from 'react';\nimport Header from './Header';\nimport Main from './Main';\nimport Footer from './Footer';\nimport PopupWithForm from './PopupWithForm';\nimport ImagePopup from './ImagePopup';\n\nfunction App() {\n    const [isEditProfilePopupOpen, setIsEditProfilePopupOpen] = React.useState(false);\n    const [isAddPlacePopupOpen, setIsAddPlacePopupOpen] = React.useState(false);\n    const [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen] = React.useState(false);\n    const [selectedCard, setSelectedCard] = React.useState();\n\n    function handleEditProfileClick() {\n        setIsEditProfilePopupOpen(true);\n    }\n    function handleAddPlaceClick() {\n        setIsAddPlacePopupOpen(true);\n    }\n    function handleEditAvatarClick() {\n        setIsEditAvatarPopupOpen(true);\n    }\n    function handleCardClick(card) {\n        setSelectedCard(card);\n    }\n    function closeAllPopups() {\n        setIsEditProfilePopupOpen(false);\n        setIsAddPlacePopupOpen(false);\n        setIsEditAvatarPopupOpen(false);\n        setSelectedCard();\n    }\n\n    return (\n        <>\n            <Header />\n            <div className=\"container\">\n                <Main\n                    onEditProfile={handleEditProfileClick}\n                    onAddPlace={handleAddPlaceClick}\n                    onEditAvatar={handleEditAvatarClick}\n                    onCardClick={handleCardClick}\n                />\n                <Footer />\n\n                <PopupWithForm\n                    title=\"Редактировать профиль\"\n                    name=\"edit\"\n                    button=\"Сохранить\"\n                    isOpen={isEditProfilePopupOpen}\n                    onClose={closeAllPopups}\n                >\n                    <label className=\"popup__field\">\n                        <input\n                            type=\"text\"\n                            id=\"name-input\"\n                            className=\"popup__item popup__item_input-name\"\n                            name=\"name\"\n                            value=\"\"\n                            placeholder=\"Имя\"\n                            required\n                            minLength=\"2\" maxLength=\"40\" />\n                        <span id=\"name-input-error\" className=\"popup__item-error\"></span>\n                    </label>\n                    <label className=\"popup__field\">\n                        <input\n                            type=\"text\"\n                            id=\"about-input\"\n                            className=\"popup__item popup__item_input-about\"\n                            name=\"about\"\n                            value=\"\"\n                            placeholder=\"О себе\"\n                            required\n                            minLength=\"2\" maxLength=\"200\" />\n                        <span id=\"about-input-error\" className=\"popup__item-error\"></span>\n                    </label>\n                </PopupWithForm>\n\n                <PopupWithForm\n                    title=\"Новое место\"\n                    name=\"add\"\n                    button=\"Создать\"\n                    isOpen={isAddPlacePopupOpen}\n                    onClose={closeAllPopups}\n                >\n                    <label className=\"popup__field\">\n                        <input\n                            type=\"text\"\n                            id=\"title-input\"\n                            className=\"popup__item popup__item_input-title\"\n                            name=\"name\" value=\"\"\n                            placeholder=\"Название\"\n                            required\n                            minLength=\"1\" maxLength=\"30\" />\n                        <span id=\"title-input-error\" className=\"popup__item-error\"></span>\n                    </label>\n                    <label className=\"popup__field\">\n                        <input\n                            type=\"url\"\n                            id=\"link-input\"\n                            className=\"popup__item popup__item_input-link\"\n                            name=\"link\"\n                            value=\"\"\n                            placeholder=\"Ссылка на картинку\"\n                            required />\n                        <span id=\"link-input-error\" className=\"popup__item-error\"></span>\n                    </label>\n                </PopupWithForm>\n\n                <PopupWithForm\n                    title=\"Обновить аватар\"\n                    name=\"avatar\"\n                    button=\"Сохранить\"\n                    isOpen={isEditAvatarPopupOpen}\n                    onClose={closeAllPopups}\n                >\n                    <label className=\"popup__field\">\n                        <input\n                            type=\"url\"\n                            id=\"link-input\"\n                            className=\"popup__item popup__item_input-avatar\"\n                            name=\"link\"\n                            value=\"\"\n                            placeholder=\"Ссылка на картинку\"\n                            required />\n                        <span id=\"link-input-error\" className=\"popup__item-error\"></span>\n                    </label>\n                </PopupWithForm>\n\n                <PopupWithForm\n                    title=\"Вы уверены?\"\n                    name=\"confirm\"\n                    button=\"Да\"\n                    onClose={closeAllPopups}\n                >\n                </PopupWithForm>\n                <ImagePopup\n                    card={selectedCard}\n                    onClose={closeAllPopups}\n                >\n                </ImagePopup>\n            </div>\n        </>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.c6f11019.svg\";"],"sourceRoot":""}